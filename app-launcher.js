const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const config = require('./config');

console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üéØ TIKTOK LIVE ANALYSER                   ‚ïë
‚ïë                   Solution Forensique Pro                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);

class AppLauncher {
  constructor() {
    this.processes = [];
    this.isShuttingDown = false;
  }

  async checkDependencies() {
    console.log('üîç V√©rification des d√©pendances...');
    
    // V√©rifier Node.js
    try {
      const nodeVersion = process.version;
      console.log(`‚úÖ Node.js: ${nodeVersion}`);
    } catch (error) {
      console.error('‚ùå Node.js non trouv√©');
      process.exit(1);
    }

    // V√©rifier Brave Browser
    if (fs.existsSync(config.browser.executablePath)) {
      console.log('‚úÖ Brave Browser trouv√©');
    } else {
      console.log('‚ö†Ô∏è  Brave Browser non trouv√©, utilisation de Chrome par d√©faut');
    }

    // V√©rifier les dossiers
    const dirs = ['./evidence', './evidence/profiles', './evidence/screenshots', './evidence/raw'];
    for (const dir of dirs) {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
        console.log(`üìÅ Dossier cr√©√©: ${dir}`);
      }
    }

    console.log('‚úÖ V√©rification termin√©e\n');
  }

  async startBackend() {
    console.log('üöÄ D√©marrage du backend...');
    
    const backend = spawn('node', ['enhanced-server.js'], {
      cwd: path.join(__dirname, 'live-tracker'),
      stdio: 'inherit'
    });

    backend.on('error', (error) => {
      console.error('‚ùå Erreur backend:', error.message);
    });

    backend.on('exit', (code) => {
      if (!this.isShuttingDown) {
        console.log(`‚ö†Ô∏è  Backend arr√™t√© avec le code: ${code}`);
      }
    });

    this.processes.push(backend);
    
    // Attendre que le backend soit pr√™t
    await new Promise(resolve => setTimeout(resolve, 3000));
    console.log('‚úÖ Backend d√©marr√© sur le port 4000\n');
  }

  async startFrontend() {
    console.log('üé® D√©marrage du frontend...');
    
    const frontend = spawn('npm', ['start'], {
      cwd: path.join(__dirname, 'frontend-react'),
      stdio: 'inherit'
    });

    frontend.on('error', (error) => {
      console.error('‚ùå Erreur frontend:', error.message);
    });

    frontend.on('exit', (code) => {
      if (!this.isShuttingDown) {
        console.log(`‚ö†Ô∏è  Frontend arr√™t√© avec le code: ${code}`);
      }
    });

    this.processes.push(frontend);
    
    // Attendre que le frontend soit pr√™t
    await new Promise(resolve => setTimeout(resolve, 5000));
    console.log('‚úÖ Frontend d√©marr√© sur le port 3000\n');
  }

  async openBrowser() {
    console.log('üåê Ouverture du navigateur...');
    
    try {
      const { default: open } = await import('open');
      await open('http://localhost:3000');
      console.log('‚úÖ Navigateur ouvert\n');
    } catch (error) {
      console.log('‚ö†Ô∏è  Ouverture manuelle requise: http://localhost:3000\n');
    }
  }

  setupShutdownHandlers() {
    const shutdown = () => {
      if (this.isShuttingDown) return;
      this.isShuttingDown = true;
      
      console.log('\nüõë Arr√™t en cours...');
      
      this.processes.forEach((process, index) => {
        try {
          process.kill('SIGTERM');
          console.log(`‚úÖ Processus ${index + 1} arr√™t√©`);
        } catch (error) {
          console.log(`‚ö†Ô∏è  Erreur arr√™t processus ${index + 1}`);
        }
      });
      
      setTimeout(() => {
        console.log('üëã TikTok Live Analyser arr√™t√©');
        process.exit(0);
      }, 2000);
    };

    process.on('SIGINT', shutdown);
    process.on('SIGTERM', shutdown);
    process.on('exit', shutdown);
  }

  async start() {
    try {
      await this.checkDependencies();
      this.setupShutdownHandlers();
      
      await this.startBackend();
      await this.startFrontend();
      await this.openBrowser();
      
      console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    ‚úÖ SYST√àME D√âMARR√â                        ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üéØ Frontend: http://localhost:3000                          ‚ïë
‚ïë  üîß Backend:  http://localhost:4000                          ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üì± Interface utilisateur pr√™te                              ‚ïë
‚ïë  üîí Syst√®me forensique activ√©                                ‚ïë
‚ïë                                                              ‚ïë
‚ïë  Appuyez sur Ctrl+C pour arr√™ter                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
      `);
      
      // Garder le processus vivant
      setInterval(() => {}, 1000);
      
    } catch (error) {
      console.error('‚ùå Erreur de d√©marrage:', error.message);
      process.exit(1);
    }
  }
}

// D√©marrer l'application
const launcher = new AppLauncher();
launcher.start();