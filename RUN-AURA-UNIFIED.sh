#!/bin/bash

echo "üöÄ AURA OSINT - LANCEMENT UNIFI√â FRONTEND/BACKEND"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

# Nettoyer les processus existants
echo "üßπ Nettoyage des processus existants..."
pkill -f "node.*qwen" 2>/dev/null || true
pkill -f "node.*ai-engine" 2>/dev/null || true
pkill -f "electron" 2>/dev/null || true
pkill -f "python.*http.server" 2>/dev/null || true

# D√©marrer les bases de donn√©es avec Docker
echo "üê≥ D√©marrage des bases de donn√©es..."
docker-compose up -d

# Attendre que les bases de donn√©es d√©marrent
echo "‚è≥ Initialisation des services (10s)..."
sleep 10

# D√©marrer le backend optimis√© (APIs uniquement)
echo "üîß D√©marrage du backend optimis√© (APIs uniquement)..."
cd backend && node server.js &
BACKEND_PID=$!
cd ..

# Attendre que le backend d√©marre
sleep 3

# D√©marrer le moteur IA (si disponible)
echo "ü§ñ D√©marrage du moteur IA Qwen..."
if [ -d "ai-engine" ]; then
    cd ai-engine && node qwen-integration.js &
    AI_PID=$!
    cd ..
else
    echo "‚ö†Ô∏è  Dossier ai-engine non trouv√© - IA non d√©marr√©e"
    AI_PID=""
fi

sleep 2

# D√©marrer le frontend unifi√©
echo "üåê Lancement du frontend unifi√©..."
if [ -d "frontend" ]; then
    cd frontend && python3 -m http.server 3000 &
    FRONTEND_PID=$!
    cd ..
else
    echo "‚ö†Ô∏è  Dossier frontend non trouv√© - Utilisation du backend int√©gr√©"
    FRONTEND_PID=""
fi

# Afficher le r√©sum√©
echo ""
echo "‚úÖ √âCOSYST√àME AURA OSINT UNIFI√â OP√âRATIONNEL!"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "üåê Frontend Unifi√©: http://localhost:3000"
echo "üîß Backend API: http://localhost:4011"
echo "üí¨ Chat IA: http://localhost:3000 (Navigation: Chat IA)"
echo "üõ†Ô∏è Outils OSINT: http://localhost:3000 (Navigation: Outils OSINT)"
echo "‚öôÔ∏è Configuration: http://localhost:3000 (Navigation: Configuration)"
echo "üìö Documentation: http://localhost:3000 (Navigation: Documentation)"
echo ""
echo "üóÑÔ∏è Services Backend:"
echo "   üìä PostgreSQL: localhost:5432"
echo "   üî¥ Redis: localhost:6379"
echo "   üîç Elasticsearch: localhost:9200"
echo "   üß† Qdrant: localhost:6333"
echo ""
echo "üéØ Architecture Unifi√©e:"
echo "   ‚úÖ Frontend complet avec tous les composants"
echo "   ‚úÖ Backend optimis√© pour les APIs uniquement"
echo "   ‚úÖ Navigation unifi√©e entre toutes les fonctionnalit√©s"
echo "   ‚úÖ Design Golden Ratio (Œ¶ = 1.618)"
echo "   ‚úÖ Port unifi√© 4011 pour toutes les APIs"
echo ""
echo "üí° Acc√©dez √† tout depuis: http://localhost:3000"
echo "‚ö° Ctrl+C pour arr√™ter l'√©cosyst√®me complet"

# G√©rer l'arr√™t propre
trap 'echo -e "\n\nüõë Arr√™t de l\\√©cosyst√®me AURA OSINT..."; [ -n "$BACKEND_PID" ] && kill $BACKEND_PID 2>/dev/null; [ -n "$AI_PID" ] && kill $AI_PID 2>/dev/null; [ -n "$FRONTEND_PID" ] && kill $FRONTEND_PID 2>/dev/null; docker-compose down; exit 0' INT

# Attendre ind√©finiment
wait