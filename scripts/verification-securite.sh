#!/bin/bash

echo "üîç V√âRIFICATION S√âCURIT√â - AVANT MIGRATION"
echo "=========================================="
echo ""

# V√©rifier les secrets expos√©s
echo "üîê SCAN SECRETS EXPOS√âS:"
echo "========================"

secrets_found=0

# Chercher des patterns de secrets
echo "üîç Recherche API keys..."
if grep -r "sk-[a-zA-Z0-9]" . --exclude-dir=node_modules --exclude-dir=.git 2>/dev/null; then
    echo "‚ö†Ô∏è  API keys trouv√©es!"
    secrets_found=1
fi

echo "üîç Recherche tokens..."
if grep -r "ghp_[a-zA-Z0-9]" . --exclude-dir=node_modules --exclude-dir=.git 2>/dev/null; then
    echo "‚ö†Ô∏è  GitHub tokens trouv√©s!"
    secrets_found=1
fi

echo "üîç Recherche mots de passe..."
if grep -ri "password.*=" . --include="*.js" --include="*.jsx" --exclude-dir=node_modules --exclude-dir=.git | grep -v "PASSWORD.*\[REDACTED\]" 2>/dev/null; then
    echo "‚ö†Ô∏è  Mots de passe trouv√©s!"
    secrets_found=1
fi

echo "üîç Recherche URLs sensibles..."
if grep -r "localhost:[0-9][0-9][0-9][0-9]" . --exclude-dir=node_modules --exclude-dir=.git | grep -v "localhost:XXXX" 2>/dev/null; then
    echo "‚ö†Ô∏è  URLs localhost non obfusqu√©es!"
    secrets_found=1
fi

if [ $secrets_found -eq 0 ]; then
    echo "‚úÖ Aucun secret expos√© d√©tect√©"
else
    echo "‚ùå SECRETS D√âTECT√âS - OBFUSCATION REQUISE!"
fi

echo ""

# V√©rifier la structure du code
echo "üìÅ V√âRIFICATION STRUCTURE:"
echo "=========================="

echo "üìä Taille du repo:"
du -sh . 2>/dev/null | head -1

echo "üìä Nombre de fichiers:"
find . -type f ! -path "./.git/*" ! -path "./node_modules/*" | wc -l

echo "üìä Langages d√©tect√©s:"
find . -name "*.js" ! -path "./node_modules/*" ! -path "./.git/*" | wc -l | xargs echo "JavaScript:"
find . -name "*.jsx" ! -path "./node_modules/*" ! -path "./.git/*" | wc -l | xargs echo "React:"
find . -name "*.ts" ! -path "./node_modules/*" ! -path "./.git/*" | wc -l | xargs echo "TypeScript:"
find . -name "*.py" ! -path "./node_modules/*" ! -path "./.git/*" | wc -l | xargs echo "Python:"

echo ""

# V√©rifier les fichiers sensibles
echo "üõ°Ô∏è FICHIERS SENSIBLES:"
echo "======================"

if [ -f ".env" ]; then
    echo "‚ö†Ô∏è  .env pr√©sent - sera ignor√© par Git"
fi

if [ -f ".env.example" ]; then
    echo "‚úÖ .env.example pr√©sent"
fi

if [ -f "SECURITY.md" ]; then
    echo "‚úÖ SECURITY.md pr√©sent"
else
    echo "‚ùå SECURITY.md manquant"
fi

if [ -f ".gitignore" ]; then
    echo "‚úÖ .gitignore pr√©sent"
    echo "   Lignes: $(wc -l < .gitignore)"
else
    echo "‚ùå .gitignore manquant"
fi

echo ""

# V√©rifier les r√©f√©rences au nom
echo "üîÑ V√âRIFICATION R√âF√âRENCES:"
echo "==========================="

old_refs=$(grep -r "TikTok-Live-Analyser" . --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=.backup-original 2>/dev/null | wc -l)
echo "R√©f√©rences 'TikTok-Live-Analyser': $old_refs"

if [ $old_refs -gt 0 ]; then
    echo "‚ö†Ô∏è  R√©f√©rences √† l'ancien nom trouv√©es:"
    grep -r "TikTok-Live-Analyser" . --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=.backup-original 2>/dev/null | head -5
fi

echo ""

# Score de s√©curit√©
echo "üìä SCORE S√âCURIT√â:"
echo "=================="

score=100

if [ $secrets_found -gt 0 ]; then
    score=$((score - 30))
    echo "‚ùå Secrets expos√©s (-30 points)"
fi

if [ $old_refs -gt 0 ]; then
    score=$((score - 10))
    echo "‚ö†Ô∏è  R√©f√©rences ancien nom (-10 points)"
fi

if [ ! -f "SECURITY.md" ]; then
    score=$((score - 10))
    echo "‚ùå SECURITY.md manquant (-10 points)"
fi

if [ ! -f ".env.example" ]; then
    score=$((score - 5))
    echo "‚ùå .env.example manquant (-5 points)"
fi

echo ""
echo "üéØ SCORE FINAL: $score/100"

if [ $score -ge 90 ]; then
    echo "‚úÖ EXCELLENT - Pr√™t pour migration publique"
elif [ $score -ge 70 ]; then
    echo "‚ö†Ô∏è  BON - Quelques am√©liorations recommand√©es"
else
    echo "‚ùå INSUFFISANT - S√©curisation requise avant migration"
fi

echo ""
echo "üéØ RECOMMANDATIONS:"
echo "=================="

if [ $secrets_found -gt 0 ]; then
    echo "‚Ä¢ Obfusquer tous les secrets d√©tect√©s"
fi

if [ $old_refs -gt 0 ]; then
    echo "‚Ä¢ Mettre √† jour toutes les r√©f√©rences au nom"
fi

if [ ! -f "SECURITY.md" ]; then
    echo "‚Ä¢ Cr√©er SECURITY.md"
fi

echo "‚Ä¢ V√©rifier manuellement les fichiers sensibles"
echo "‚Ä¢ Tester la vitrine apr√®s migration"
echo "‚Ä¢ Archiver l'ancien repo apr√®s migration"