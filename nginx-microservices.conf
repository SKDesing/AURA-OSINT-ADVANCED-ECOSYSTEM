events {
    worker_connections 1024;
}

http {
    # Upstreams pour chaque service
    upstream dashboard {
        server dashboard-service:3000;
    }

    upstream analyser {
        server analyser-service:3000;
    }

    upstream profiles {
        server profiles-service:3000;
    }

    upstream lives {
        server lives-service:3000;
    }

    upstream create {
        server create-service:3000;
    }

    upstream database {
        server database-service:3000;
    }

    upstream reports {
        server reports-service:3000;
    }

    # Configuration des logs
    log_format microservices '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$upstream_addr" "$request_time"';

    access_log /var/log/nginx/access.log microservices;
    error_log /var/log/nginx/error.log;

    # Configuration générale
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    client_max_body_size 100M;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Serveur principal avec routage par service
    server {
        listen 80;
        server_name localhost;

        # Dashboard (Page d'accueil)
        location / {
            proxy_pass http://dashboard;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Service-Name "dashboard";
            proxy_cache_bypass $http_upgrade;
        }

        # Service Analyser TikTok
        location /analyser {
            rewrite ^/analyser/(.*) /$1 break;
            proxy_pass http://analyser;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Service-Name "analyser";
            proxy_cache_bypass $http_upgrade;
        }

        # Service Profils
        location /profiles {
            rewrite ^/profiles/(.*) /$1 break;
            proxy_pass http://profiles;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Service-Name "profiles";
            proxy_cache_bypass $http_upgrade;
        }

        # Service Lives
        location /lives {
            rewrite ^/lives/(.*) /$1 break;
            proxy_pass http://lives;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Service-Name "lives";
            proxy_cache_bypass $http_upgrade;
        }

        # Service Création
        location /create {
            rewrite ^/create/(.*) /$1 break;
            proxy_pass http://create;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Service-Name "create";
            proxy_cache_bypass $http_upgrade;
        }

        # Service Base de Données
        location /database {
            rewrite ^/database/(.*) /$1 break;
            proxy_pass http://database;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Service-Name "database";
            proxy_cache_bypass $http_upgrade;
        }

        # Service Rapports
        location /reports {
            rewrite ^/reports/(.*) /$1 break;
            proxy_pass http://reports;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_Set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Service-Name "reports";
            proxy_cache_bypass $http_upgrade;
        }

        # API commune (pour les appels inter-services)
        location /api/ {
            # Router vers le service approprié selon l'endpoint
            if ($request_uri ~ ^/api/profiles) {
                proxy_pass http://profiles;
            }
            if ($request_uri ~ ^/api/sessions) {
                proxy_pass http://lives;
            }
            if ($request_uri ~ ^/api/database) {
                proxy_pass http://database;
            }
            if ($request_uri ~ ^/api/reports) {
                proxy_pass http://reports;
            }
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Health check global
        location /health {
            access_log off;
            return 200 "SCIS Gateway healthy\n";
            add_header Content-Type text/plain;
        }

        # Métriques Nginx
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.0.0.0/8;
            deny all;
        }
    }

    # Serveur pour accès direct aux services (développement)
    server {
        listen 8080;
        server_name localhost;

        location /dashboard {
            proxy_pass http://dashboard-service:3000;
        }
        location /analyser {
            proxy_pass http://analyser-service:3000;
        }
        location /profiles {
            proxy_pass http://profiles-service:3000;
        }
        location /lives {
            proxy_pass http://lives-service:3000;
        }
        location /create {
            proxy_pass http://create-service:3000;
        }
        location /database {
            proxy_pass http://database-service:3000;
        }
        location /reports {
            proxy_pass http://reports-service:3000;
        }
    }
}