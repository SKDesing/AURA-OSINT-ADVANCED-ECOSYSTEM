/**\n * 🎬 AURA LOADER SYSTEM - Golden Ratio Animations\n * Séquence de démarrage en 3 phases basée sur Φ (1.618)\n */\n\nclass AURALoader {\n  constructor() {\n    this.phi = 1.618;\n    this.currentPhase = 1;\n    this.progress = 0;\n    this.slogans = [\n      '🔬 <strong>Science des données</strong> appliquée à l\\'OSINT depuis 1.618 décennies',\n      '🧬 <strong>200+ profils synthétiques</strong> pour entraînement sans compromis éthique',\n      '🌐 <strong>Architecture distribuée</strong> : PostgreSQL + Redis + Qdrant + Qwen AI',\n      '⚡ <strong>Temps réel</strong> : WebSocket + FastAPI + NestJS harmonisés',\n      '🎯 <strong>Précision chirurgicale</strong> : Phone, Email, Username, Domain, Image OSINT',\n      '🛡️ <strong>Sécurité par conception</strong> : Chiffrement E2E + Audit logs complets',\n      '🤖 <strong>IA explicable</strong> : Chaque décision tracée et justifiée',\n      '📊 <strong>Visualisation immersive</strong> : D3.js + Chart.js + ApexCharts',\n      '🌍 <strong>OSINT historique intégré</strong> : Des archives 1800s aux blockchains 2024',\n      '✨ <strong>Design Φ (1.618)</strong> : Harmonie mathématique en chaque pixel'\n    ];\n    this.currentSloganIndex = 0;\n    this.sloganInterval = null;\n    \n    this.bindEvents();\n  }\n\n  /**\n   * 🚀 Démarre la séquence de chargement\n   */\n  start() {\n    console.log('🎬 Démarrage séquence AURA Loader (Φ-based)');\n    \n    // Créer les particules de fond\n    this.createParticles();\n    \n    // Phase 1: Logo géant + texte (4 secondes Φ)\n    this.startPhase1();\n    \n    setTimeout(() => {\n      this.startPhase2();\n    }, 4000 * this.phi); // ~6.472s\n    \n    setTimeout(() => {\n      this.startPhase3();\n    }, 8000 * this.phi); // ~12.944s\n    \n    setTimeout(() => {\n      this.completeLoading();\n    }, 15000 * this.phi); // ~24.27s\n  }\n\n  /**\n   * 🎭 Phase 1: Logo géant avec spirale dorée\n   */\n  startPhase1() {\n    console.log('📍 Phase 1: Logo géant + Animation spirale');\n    \n    const phase1 = document.querySelector('.phase-1');\n    if (phase1) {\n      phase1.classList.add('active');\n      \n      // Animation des mots avec délais Φ\n      const words = phase1.querySelectorAll('.word');\n      words.forEach((word, index) => {\n        setTimeout(() => {\n          word.style.animationDelay = '0s';\n          word.style.opacity = '1';\n          word.style.transform = 'translateY(0) rotateX(0)';\n        }, index * 500 * this.phi); // Délais croissants\n      });\n    }\n  }\n\n  /**\n   * 🏷️ Phase 2: Banderoles d'annonces\n   */\n  startPhase2() {\n    console.log('📍 Phase 2: Banderoles technologiques');\n    \n    // Masquer phase 1\n    const phase1 = document.querySelector('.phase-1');\n    if (phase1) {\n      phase1.classList.remove('active');\n    }\n    \n    // Activer phase 2\n    const phase2 = document.querySelector('.phase-2');\n    if (phase2) {\n      phase2.classList.add('active');\n      \n      // Animer les banderoles une par une\n      const banners = phase2.querySelectorAll('.announcement-banner');\n      banners.forEach((banner, index) => {\n        setTimeout(() => {\n          banner.style.opacity = '1';\n          banner.style.transform = 'translateX(0)';\n        }, index * 300 * this.phi); // Délais Φ\n      });\n    }\n  }\n\n  /**\n   * 📊 Phase 3: Progress bar + slogans défilants\n   */\n  startPhase3() {\n    console.log('📍 Phase 3: Progress bar + Slogans techniques');\n    \n    // Masquer phase 2\n    const phase2 = document.querySelector('.phase-2');\n    if (phase2) {\n      phase2.classList.remove('active');\n    }\n    \n    // Activer phase 3\n    const phase3 = document.querySelector('.phase-3');\n    if (phase3) {\n      phase3.classList.add('active');\n      \n      // Démarrer la progress bar\n      this.animateProgressBar();\n      \n      // Démarrer les slogans défilants\n      this.startSlogans();\n    }\n  }\n\n  /**\n   * 📈 Animation de la progress bar dorée\n   */\n  animateProgressBar() {\n    const progressBar = document.getElementById('phi-progress-bar');\n    const progressText = document.getElementById('progress-text');\n    const progressPercent = document.getElementById('progress-percent');\n    \n    if (!progressBar) return;\n    \n    const steps = [\n      { percent: 0, text: 'Initialisation des modules...' },\n      { percent: 16, text: 'Chargement base de données Φ...' },\n      { percent: 32, text: 'Connexion Qwen AI 2.5...' },\n      { percent: 48, text: 'Synchronisation OSINT tools...' },\n      { percent: 64, text: 'Vérification sécurité E2E...' },\n      { percent: 80, text: 'Optimisation golden ratio...' },\n      { percent: 96, text: 'Finalisation interface...' },\n      { percent: 100, text: 'Système prêt !' }\n    ];\n    \n    let currentStep = 0;\n    \n    const updateProgress = () => {\n      if (currentStep >= steps.length) return;\n      \n      const step = steps[currentStep];\n      \n      // Animer la barre\n      progressBar.style.width = `${step.percent}%`;\n      \n      // Mettre à jour le texte\n      if (progressText) {\n        progressText.textContent = step.text;\n      }\n      \n      if (progressPercent) {\n        progressPercent.textContent = `${step.percent}%`;\n      }\n      \n      currentStep++;\n      \n      if (currentStep < steps.length) {\n        setTimeout(updateProgress, 800 * this.phi); // Délai Φ entre étapes\n      }\n    };\n    \n    updateProgress();\n  }\n\n  /**\n   * 💬 Démarrage des slogans défilants\n   */\n  startSlogans() {\n    const slogansContainer = document.querySelector('.slogans-container');\n    if (!slogansContainer) return;\n    \n    // Afficher le premier slogan\n    this.showSlogan(0);\n    \n    // Rotation des slogans\n    this.sloganInterval = setInterval(() => {\n      this.currentSloganIndex = (this.currentSloganIndex + 1) % this.slogans.length;\n      this.showSlogan(this.currentSloganIndex);\n    }, 2000 * this.phi); // Changement toutes les ~3.236s\n  }\n\n  /**\n   * 📝 Affiche un slogan spécifique\n   */\n  showSlogan(index) {\n    const slogans = document.querySelectorAll('.slogan');\n    \n    // Masquer tous les slogans\n    slogans.forEach(slogan => {\n      slogan.classList.remove('active');\n    });\n    \n    // Afficher le slogan actuel\n    if (slogans[index]) {\n      slogans[index].classList.add('active');\n    }\n  }\n\n  /**\n   * ✨ Création des particules dorées flottantes\n   */\n  createParticles() {\n    const loaderContainer = document.getElementById('aura-loader');\n    if (!loaderContainer) return;\n    \n    const particlesContainer = document.createElement('div');\n    particlesContainer.className = 'particles-container';\n    loaderContainer.appendChild(particlesContainer);\n    \n    // Créer 50 particules (nombre basé sur Φ)\n    const particleCount = Math.floor(50 * this.phi); // ~81 particules\n    \n    for (let i = 0; i < particleCount; i++) {\n      const particle = document.createElement('div');\n      particle.className = 'particle';\n      \n      // Position aléatoire\n      particle.style.left = `${Math.random() * 100}%`;\n      particle.style.animationDelay = `${Math.random() * 10}s`;\n      particle.style.animationDuration = `${(8 + Math.random() * 4) * this.phi}s`;\n      \n      // Taille variable basée sur Φ\n      const size = 1 + Math.random() * 3 * this.phi;\n      particle.style.width = `${size}px`;\n      particle.style.height = `${size}px`;\n      \n      particlesContainer.appendChild(particle);\n    }\n  }\n\n  /**\n   * ✅ Finalisation du chargement\n   */\n  completeLoading() {\n    console.log('✅ Chargement terminé - Transition vers authentification');\n    \n    // Arrêter les slogans\n    if (this.sloganInterval) {\n      clearInterval(this.sloganInterval);\n    }\n    \n    // Fade out du loader\n    const loaderContainer = document.getElementById('aura-loader');\n    if (loaderContainer) {\n      loaderContainer.classList.add('fadeout');\n      \n      setTimeout(() => {\n        loaderContainer.style.display = 'none';\n        \n        // Afficher l'écran d'authentification\n        const authContainer = document.getElementById('auth-container');\n        if (authContainer) {\n          authContainer.style.display = 'flex';\n          authContainer.style.opacity = '0';\n          \n          // Fade in de l'auth\n          setTimeout(() => {\n            authContainer.style.transition = `opacity ${this.phi}s ease`;\n            authContainer.style.opacity = '1';\n          }, 100);\n        }\n      }, 1000 * this.phi); // Délai Φ pour le fade out\n    }\n  }\n\n  /**\n   * 🎧 Liaison des événements\n   */\n  bindEvents() {\n    // Skip loader (pour développement)\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape') {\n        console.log('⏭️ Skip loader (ESC pressed)');\n        this.completeLoading();\n      }\n    });\n    \n    // Click pour skip (mobile)\n    document.addEventListener('click', (e) => {\n      if (e.target.closest('.loader-container')) {\n        console.log('⏭️ Skip loader (click detected)');\n        this.completeLoading();\n      }\n    });\n  }\n\n  /**\n   * 🧹 Nettoyage des ressources\n   */\n  destroy() {\n    if (this.sloganInterval) {\n      clearInterval(this.sloganInterval);\n    }\n    \n    // Supprimer les particules\n    const particlesContainer = document.querySelector('.particles-container');\n    if (particlesContainer) {\n      particlesContainer.remove();\n    }\n  }\n}\n\n// Initialisation globale\nwindow.AURALoader = new AURALoader();\n\n// Auto-start si DOM ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => {\n    // Le start sera appelé depuis index.html\n  });\n} else {\n  // DOM déjà prêt\n  console.log('🎬 AURALoader prêt (DOM loaded)');\n}\n\nconsole.log('🎬 AURALoader module chargé');