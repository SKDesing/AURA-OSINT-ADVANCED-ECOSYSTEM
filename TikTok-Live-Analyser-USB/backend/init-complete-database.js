#!/usr/bin/env node

const SCISDataArchitecture = require('./data-architecture');
const fs = require('fs').promises;
const path = require('path');

/**
 * üöÄ INITIALISATION COMPL√àTE DE LA BASE DE DONN√âES SCIS
 * Architecture forensique compl√®te avec donn√©es de d√©monstration
 */
async function initializeCompleteDatabase() {
    console.log('üéØ INITIALISATION COMPL√àTE SCIS DATABASE');
    console.log('========================================');
    console.log('');

    try {
        // Charger les variables d'environnement
        require('dotenv').config();

        // Cr√©er le fichier .env s'il n'existe pas
        await ensureEnvironmentFile();

        // Initialiser l'architecture compl√®te
        console.log('üèóÔ∏è Initialisation de l\'architecture de donn√©es...');
        const dataArch = new SCISDataArchitecture();
        
        // Attendre l'initialisation compl√®te
        await new Promise(resolve => setTimeout(resolve, 3000));

        // V√©rifier les statistiques
        console.log('üìä V√©rification des donn√©es...');
        const stats = await dataArch.getRealTimeStats();
        
        console.log('');
        console.log('üìà STATISTIQUES DE LA BASE DE DONN√âES:');
        console.log('=====================================');
        console.log(`üë• Profils totaux: ${stats.total_profiles}`);
        console.log(`‚ö†Ô∏è Profils √† risque: ${stats.high_risk_profiles}`);
        console.log(`üì° Sessions actives: ${stats.active_sessions}`);
        console.log(`üí¨ Commentaires (24h): ${stats.comments_24h}`);
        console.log(`üö® Alertes en attente: ${stats.pending_alerts}`);
        console.log(`üìÅ Fichiers de preuves: ${stats.total_evidence_files}`);

        // Tester les fonctionnalit√©s
        console.log('');
        console.log('üß™ TESTS DES FONCTIONNALIT√âS:');
        console.log('=============================');
        
        // Test d'analyse automatique
        await dataArch.analyzeCollectedData();
        console.log('‚úÖ Analyse automatique des donn√©es');
        
        // Test de maintenance
        await dataArch.performMaintenance();
        console.log('‚úÖ Maintenance automatique');

        // Cr√©er les API endpoints
        await createAPIEndpoints(dataArch);
        console.log('‚úÖ API endpoints cr√©√©s');

        console.log('');
        console.log('üéâ INITIALISATION COMPL√àTE R√âUSSIE !');
        console.log('===================================');
        console.log('');
        console.log('üóÑÔ∏è BASE DE DONN√âES POSTGRESQL:');
        console.log('  üìä 12 tables forensiques cr√©√©es');
        console.log('  üîç Index de performance optimis√©s');
        console.log('  üîÑ Triggers automatiques actifs');
        console.log('  üìà Vues analytiques disponibles');
        console.log('  üîí S√©curit√© Row Level Security');
        console.log('');
        console.log('üì° COLLECTE DE DONN√âES EN TEMPS R√âEL:');
        console.log('  üí¨ Commentaires avec analyse de sentiment');
        console.log('  üìä M√©triques live automatiques');
        console.log('  üì∏ Preuves avec hash d\'int√©grit√©');
        console.log('  üö® Alertes automatiques');
        console.log('');
        console.log('üéØ ARCHITECTURE OP√âRATIONNELLE:');
        console.log('  üîÑ T√¢ches automatis√©es configur√©es');
        console.log('  üìà Scores de risque dynamiques');
        console.log('  üßπ Maintenance automatique');
        console.log('  üìä Statistiques temps r√©el');
        console.log('');
        console.log('üåê PR√äT POUR L\'INTERFACE SCIS !');

        await dataArch.close();

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation:', error.message);
        console.log('');
        console.log('üí° SOLUTIONS POSSIBLES:');
        console.log('  1. V√©rifier que PostgreSQL est d√©marr√©');
        console.log('  2. V√©rifier les param√®tres de connexion');
        console.log('  3. Cr√©er la base de donn√©es: createdb aura_investigations');
        console.log('  4. Utiliser Docker: docker-compose up -d postgres');
        process.exit(1);
    }
}

/**
 * üìù CR√âATION DU FICHIER ENVIRONNEMENT
 */
async function ensureEnvironmentFile() {
    const envPath = path.join(__dirname, '.env');
    
    try {
        await fs.access(envPath);
        console.log('‚úÖ Fichier .env trouv√©');
    } catch {
        const envContent = `
# Configuration Base de Donn√©es PostgreSQL SCIS
DB_HOST=localhost
DB_PORT=5432
DB_NAME=aura_investigations
DB_USER=aura_user
DB_PASSWORD=aura_secure_2024

# Configuration Application SCIS
NODE_ENV=production
JWT_SECRET=scis_forensic_secret_key_2024
UPLOAD_DIR=../evidence/uploads
LOG_LEVEL=info

# Configuration Analyse
ENABLE_AUTO_ANALYSIS=true
TOXICITY_THRESHOLD=0.7
SENTIMENT_ANALYSIS=true
AUTO_ALERTS=true

# Configuration S√©curit√©
ENABLE_ENCRYPTION=true
FORENSIC_LOGGING=true
CHAIN_OF_CUSTODY=true
RETENTION_DAYS=2555

# Configuration Performance
MAX_CONCURRENT_SESSIONS=10
AUTO_SCREENSHOT_INTERVAL=30
CLEANUP_INTERVAL=3600
`;
        await fs.writeFile(envPath, envContent.trim());
        console.log('‚úÖ Fichier .env cr√©√© avec configuration compl√®te');
    }
}

/**
 * üîå CR√âATION DES API ENDPOINTS
 */
async function createAPIEndpoints(dataArch) {
    const apiCode = `
const express = require('express');
const SCISDataArchitecture = require('./data-architecture');

const router = express.Router();
const dataArch = new SCISDataArchitecture();

// üìä Statistiques temps r√©el
router.get('/stats', async (req, res) => {
    try {
        const stats = await dataArch.getRealTimeStats();
        res.json({ success: true, stats });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// üë• Gestion des profils
router.get('/profiles', async (req, res) => {
    try {
        const result = await dataArch.pool.query(\`
            SELECT p.*, 
                   COUNT(s.id) as total_sessions,
                   COUNT(a.id) as total_alerts
            FROM profiles p
            LEFT JOIN live_sessions s ON p.id = s.profile_id
            LEFT JOIN automated_alerts a ON p.id = a.profile_id
            GROUP BY p.id
            ORDER BY p.risk_score DESC, p.created_at DESC
            LIMIT 50
        \`);
        res.json({ success: true, profiles: result.rows });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// üì° Sessions actives
router.get('/sessions/active', async (req, res) => {
    try {
        const result = await dataArch.pool.query(\`
            SELECT * FROM active_sessions_summary
            ORDER BY start_time DESC
        \`);
        res.json({ success: true, sessions: result.rows });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// üö® Alertes en attente
router.get('/alerts/pending', async (req, res) => {
    try {
        const result = await dataArch.pool.query(\`
            SELECT a.*, p.username, s.title as session_title
            FROM automated_alerts a
            LEFT JOIN profiles p ON a.profile_id = p.id
            LEFT JOIN live_sessions s ON a.session_id = s.id
            WHERE a.acknowledged = false
            ORDER BY a.severity DESC, a.created_at DESC
            LIMIT 20
        \`);
        res.json({ success: true, alerts: result.rows });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// üí¨ Commentaires r√©cents
router.get('/comments/recent', async (req, res) => {
    try {
        const result = await dataArch.pool.query(\`
            SELECT c.*, p.username, s.title as session_title
            FROM live_comments c
            JOIN live_sessions s ON c.session_id = s.id
            LEFT JOIN profiles p ON s.profile_id = p.id
            WHERE c.created_at > NOW() - INTERVAL '24 hours'
            ORDER BY c.created_at DESC
            LIMIT 100
        \`);
        res.json({ success: true, comments: result.rows });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// üìà Analyse des donn√©es
router.post('/analyze', async (req, res) => {
    try {
        await dataArch.analyzeCollectedData();
        res.json({ success: true, message: 'Analyse termin√©e' });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

module.exports = router;
`;

    const apiPath = path.join(__dirname, 'scis-api-routes.js');
    await fs.writeFile(apiPath, apiCode.trim());
    console.log('‚úÖ Routes API SCIS cr√©√©es');
}

// Ex√©cuter l'initialisation
if (require.main === module) {
    initializeCompleteDatabase();
}

module.exports = initializeCompleteDatabase;